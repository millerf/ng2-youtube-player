{"version":3,"file":"ngx-youtube-player.umd.min.js","sources":["../../src/services/youtube-player.service.ts","../../src/modules/youtube-player.component.ts","../../src/modules/ngx-youtube-player.module.ts"],"sourcesContent":["import { Http, URLSearchParams, Response } from '@angular/http';\nimport { Injectable, NgZone, EventEmitter } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { IPlayerApiScriptOptions, IPlayerOutputs, IPlayerSize } from '../models';\nexport class YoutubePlayerService {\n/**\n * @return {?}\n */\nstatic get win () {\n    return window;\n  }\n/**\n * @return {?}\n */\nstatic get YT() {\n    return YoutubePlayerService.win['YT'];\n  }\n/**\n * @return {?}\n */\nstatic get Player() {\n    return YoutubePlayerService.YT.Player;\n  }\n\n  api: ReplaySubject<YT.Player>;\nprivate isFullscreen: boolean = false;\nprivate defaultSizes = {\n      height: 270,\n      width: 367\n  };\n/**\n * @param {?} zone\n */\nconstructor (private zone: NgZone) {\n    this.createApi();\n  }\n/**\n * @param {?} options\n * @return {?}\n */\nloadPlayerApi (options: IPlayerApiScriptOptions) {\n    const /** @type {?} */ doc = YoutubePlayerService.win.document;\n    let /** @type {?} */ playerApiScript = doc.createElement(\"script\");\n    playerApiScript.type = \"text/javascript\";\n    playerApiScript.src = `http://www.youtube.com/iframe_api`;\n    doc.body.appendChild(playerApiScript);\n  }\n/**\n * @param {?} elementId\n * @param {?} outputs\n * @param {?} sizes\n * @param {?=} videoId\n * @param {?=} playerVars\n * @return {?}\n */\nsetupPlayer (\n    elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize,\n    videoId = '', playerVars: YT.PlayerVars) {\n    const /** @type {?} */ createPlayer = () => {\n      if (YoutubePlayerService.Player) {\n        this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n      }\n    };\n    this.api.subscribe(createPlayer);\n  }\n/**\n * @param {?} player\n * @return {?}\n */\nplay (player: YT.Player) {\n    player.playVideo();\n  }\n/**\n * @param {?} player\n * @return {?}\n */\npause (player: YT.Player) {\n    player.pauseVideo();\n  }\n/**\n * @param {?} media\n * @param {?} player\n * @return {?}\n */\nplayVideo(media: any, player: YT.Player) {\n    const /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;\n    player.loadVideoById(id);\n    this.play(player);\n  }\n/**\n * @param {?} player\n * @return {?}\n */\nisPlaying (player: YT.Player) {\n    // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n    const /** @type {?} */ isPlayerReady: any = player && player.getPlayerState;\n    const /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};\n    const /** @type {?} */ isPlayerPlaying = isPlayerReady\n      ? playerState !== YT.PlayerState.ENDED && playerState !== YT.PlayerState.PAUSED\n      : false;\n    return isPlayerPlaying;\n  }\n/**\n * @param {?} elementId\n * @param {?} outputs\n * @param {?} sizes\n * @param {?=} videoId\n * @param {?=} playerVars\n * @return {?}\n */\ncreatePlayer (\n    elementId: string, outputs: IPlayerOutputs, sizes: IPlayerSize,\n    videoId = '', playerVars: YT.PlayerVars = {}) {\n    const /** @type {?} */ service = this;\n    const /** @type {?} */ playerSize = {\n      height: sizes.height || this.defaultSizes.height,\n      width: sizes.width || this.defaultSizes.width\n    };\n    return new YoutubePlayerService.Player(elementId, Object.assign({}, playerSize, {\n      events: {\n          onReady: (ev: YT.PlayerEvent) => {\n            this.zone.run(() => outputs.ready && outputs.ready.next(ev.target));\n          },\n          onStateChange: (ev: YT.PlayerEvent) => {\n            this.zone.run(() => outputs.change && outputs.change.next(ev));\n            // this.zone.run(() => onPlayerStateChange(ev));\n          }\n      },\n      videoId,\n      playerVars,\n    }));\n\n    // TODO: DEPRECATE?\n    // function onPlayerStateChange (event: any) {\n    //   const state = event.data;\n    //   const PlayerState = YoutubePlayerService.YT.PlayerState;\n    //   // play the next song if its not the end of the playlist\n    //   // should add a \"repeat\" feature\n    //   if (state === PlayerState.ENDED) {\n\n    //   }\n\n    //   if (state === PlayerState.PAUSED) {\n    //       // service.playerState = PlayerState.PAUSED;\n    //   }\n    //   if (state === PlayerState.PLAYING) {\n    //       // service.playerState = PlayerState.PLAYING;\n    //   }\n    // }\n  }\n/**\n * @param {?} player\n * @param {?} isFullScreen\n * @return {?}\n */\ntoggleFullScreen (player: YT.Player, isFullScreen: boolean | null | undefined) {\n    let { height, width } = this.defaultSizes;\n\n    if (!isFullScreen) {\n      height = window.innerHeight;\n      width = window.innerWidth;\n    }\n    player.setSize(width, height);\n    // TODO: dispatch event\n  }\n/**\n * @return {?}\n */\ngenerateUniqueId () {\n    const /** @type {?} */ len = 7;\n    return Math.random().toString(35).substr(2, len);\n  }\n/**\n * @return {?}\n */\nprivate createApi () {\n    this.api = new ReplaySubject(1);\n    const /** @type {?} */ onYouTubeIframeAPIReady = () => {\n      if (YoutubePlayerService.win) {\n        this.api.next( /** @type {?} */((<any> YoutubePlayerService.YT)));\n      }\n    };\n    YoutubePlayerService.win['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction YoutubePlayerService_tsickle_Closure_declarations() {\n/** @type {?} */\nYoutubePlayerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nYoutubePlayerService.ctorParameters;\n/** @type {?} */\nYoutubePlayerService.prototype.api;\n/** @type {?} */\nYoutubePlayerService.prototype.isFullscreen;\n/** @type {?} */\nYoutubePlayerService.prototype.defaultSizes;\n/** @type {?} */\nYoutubePlayerService.prototype.zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport { YoutubePlayerService } from '../services/youtube-player.service';\nexport class YoutubePlayerComponent implements AfterContentInit {\n   videoId = '';\n   height: number;\n   width: number;\n/**\n * \\@description sets the protocol by the navigator object\n * if there is no window, it sets a default http protocol\n * unless the protocol is set from outside\n */\nprotocol: string = this.getProtocol();\n   playerVars: YT.PlayerVars = {};\n\n  // player created and initialized - sends instance of the player\n   ready = new EventEmitter<YT.Player>();\n  // state change: send the YT event with its state\n   change = new EventEmitter<YT.PlayerEvent>();\n/**\n * @param {?} playerService\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\npublic playerService: YoutubePlayerService,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2\n  ) {}\n/**\n * @return {?}\n */\nngAfterContentInit () {\n    const /** @type {?} */ htmlId = this.playerService.generateUniqueId();\n    const /** @type {?} */ playerSize = { height: this.height, width: this.width };\n    const /** @type {?} */ container = this.renderer.selectRootElement('#yt-player-ngx-component');\n    this.renderer.setAttribute(container, 'id', htmlId);\n    this.playerService.loadPlayerApi({\n      protocol: this.protocol\n    });\n    this.playerService.setupPlayer(htmlId, {\n      change: this.change,\n      ready: this.ready,\n    }, playerSize, this.videoId, this.playerVars);\n  }\n/**\n * @return {?}\n */\ngetProtocol() {\n    const /** @type {?} */ hasWindow = window && window.location;\n    const /** @type {?} */ protocol = hasWindow\n      ? window.location.protocol.replace(':', '')\n      : 'http';\n    return protocol;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'youtube-player',\n  template: `\n    <div id=\"yt-player-ngx-component\"></div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: YoutubePlayerService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'videoId': [{ type: Input },],\n'height': [{ type: Input },],\n'width': [{ type: Input },],\n'protocol': [{ type: Input },],\n'playerVars': [{ type: Input },],\n'ready': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction YoutubePlayerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nYoutubePlayerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nYoutubePlayerComponent.ctorParameters;\n/** @type {?} */\nYoutubePlayerComponent.propDecorators;\n/** @type {?} */\nYoutubePlayerComponent.prototype.videoId;\n/** @type {?} */\nYoutubePlayerComponent.prototype.height;\n/** @type {?} */\nYoutubePlayerComponent.prototype.width;\n/**\n * \\@description sets the protocol by the navigator object\n * if there is no window, it sets a default http protocol\n * unless the protocol is set from outside\n * @type {?}\n */\nYoutubePlayerComponent.prototype.protocol;\n/** @type {?} */\nYoutubePlayerComponent.prototype.playerVars;\n/** @type {?} */\nYoutubePlayerComponent.prototype.ready;\n/** @type {?} */\nYoutubePlayerComponent.prototype.change;\n/** @type {?} */\nYoutubePlayerComponent.prototype.playerService;\n/** @type {?} */\nYoutubePlayerComponent.prototype.elementRef;\n/** @type {?} */\nYoutubePlayerComponent.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { YoutubePlayerComponent } from './youtube-player.component';\nimport { YoutubePlayerService } from '../services/youtube-player.service';\nexport class YoutubePlayerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    YoutubePlayerComponent\n  ],\n  exports: [\n    YoutubePlayerComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    YoutubePlayerService\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction YoutubePlayerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nYoutubePlayerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nYoutubePlayerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["YoutubePlayerService","zone","this","isFullscreen","defaultSizes","height","width","createApi","Object","defineProperty","get","window","win","YT","Player","prototype","loadPlayerApi","options","doc","document","playerApiScript","createElement","type","src","body","appendChild","setupPlayer","elementId","outputs","sizes","videoId","playerVars","_this","createPlayer","api","subscribe","play","player","playVideo","pause","pauseVideo","media","id","loadVideoById","isPlaying","isPlayerReady","getPlayerState","playerState","PlayerState","ENDED","PAUSED","playerSize","assign","events","onReady","ev","run","ready","next","target","onStateChange","change","toggleFullScreen","isFullScreen","_a","innerHeight","innerWidth","setSize","generateUniqueId","Math","random","toString","substr","ReplaySubject","onYouTubeIframeAPIReady","decorators","Injectable","ctorParameters","NgZone","YoutubePlayerComponent","playerService","elementRef","renderer","protocol","getProtocol","EventEmitter","ngAfterContentInit","htmlId","container","selectRootElement","setAttribute","location","replace","Component","args","changeDetection","ChangeDetectionStrategy","OnPush","selector","template","ElementRef","Renderer2","propDecorators","Input","Output","YoutubePlayerModule","NgModule","declarations","exports","imports","CommonModule","providers"],"mappings":"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"}